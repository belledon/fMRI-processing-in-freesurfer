%  Calculate connectivity values and rankings to a seed region.
%  To calculate stats, load in a matrix of timecourses for the seed region
%  and all other ROIs across all subjects in a group
%
%  Suggested Use: Repeat this calculation for all groups in your study
%  e.g. blindV1_pearsonR = TimeCourseStats1 (... blind_subj_timcourses ...)
%       sightV1_pearsonR = TimeCourseStats1 (... sight_subj_timcourses ...)
%  
%  Suggested Visualization: Use the function, VisualizeTimeCourseStats1 to
%  generate histograms for the distributions of regional correlations and
%  regional rankings across subjects
%
%  Usage: [ ranked_corrs, ranked_regions, regional_corrs, regional_ranks ] ...
%         ????      = TimeCourseStats1(TC_mat_file, seed_ind, R_type)
%  
%  TC_mat_file  - 	generated from the script build_TC_mat.m
%                   contains timecourses, ROI_legend, subj_legend
%  
%  seed_ind  -  the index of seed ROI in rows, search according to
%               legend generated by build_TC_mat.m
%
%  R_type  -  choose between Pearson's Correlation 'pear' or
%             Partial Correlation 'par'
%
%
%  Returned values:
%  
%       ranked_corrs - for each ranking, report correlation across subj
%                           column 1: ROI rank 
%                           column 2: subject 1's ROI rank's corr
%                           column 3: subject 2's ROI rank's corr
%                           ...
%                           column n+1: subject n's ROI rank
%                       THUS, row x: xth ranked ROI's correlation across
%                       subj
%                       rank    subj 1 corr     subj 2 corr     subj 3 corr
%                        1          0.7             0.8             0.5
%                        2          0.65            0.6             0.4
%                        3          0.5             0.3             0.39
%       ranked_regions - for each ranking, report region name across subj
%                           column 1: ROI rank 
%                           column 2: subject 1's ROI rank's region name
%                           column 3: subject 2's ROI rank's region name
%                           ...
%                           column n+1: subject n's ROI rank
%                       THUS, row x: xth ranked ROI's region name across
%                       subj
%                       rank    subj 1 reg      subj 2 reg      subj 3 reg
%                        1          V2              V2             V2
%                        2          V3              V3             IGN
%                        3          IGN             IGN            V3
%       ranked_indices - for each ranking, report region index across subj
%                           column 1: ROI rank 
%                           column 2: subject 1's ROI rank's region index
%                           column 3: subject 2's ROI rank's region index
%                           ...
%                           column n+1: subject n's ROI rank
%                       THUS, row x: xth ranked ROI's region name across
%                       subj
%                       rank    subj 1 reg      subj 2 reg      subj 3 reg
%                        1          1               1               1
%                        2          2               2               3
%                        3          3               3               2
%       regional_corrs - for each region, report correlation across subj
%                           column 1: ROI name 
%                           column 2: subject 1's ROI's corr
%                           column 3: subject 2's ROI's corr
%                           ...
%                           column n+1: subject n's ROI rank
%                       THUS, row x: xth ROI's correlation across subj
%                       ROI    subj 1 corr     subj 2 corr     subj 3 corr
%                        V2         0.7             0.8             0.5
%                        V3         0.65            0.6             0.39
%                        LGN        0.5             0.3             0.4
%       regional_ranks - for each region, report ranks across subj
%                           column 1: ROI name 
%                           column 2: subject 1's ROI's rank
%                           column 3: subject 2's ROI's rank
%                           ...
%                           column n+1: subject n's ROI rank
%                       THUS, row x: xth ROI's correlation across subj
%                       ROI    subj 1 rank     subj 2 rank     subj 3 rank
%                        V2         1              1               1
%                        V3         2              2               3
%                        LGN        3              3               2
%       ROI_results_legend - the indices corresponding to each ROI in 
%                            results reports - namely, without the seed_ind
%
%  - Jess Huang (jess.huang.98@gmail.com)
%
function [ ranked_corrs, ranked_regions, regional_corrs, ...
           ROI_results_legend, regional_ranks, ranked_indices ] ...
    = TimeCourseStats1_semi_automated( TC_mat_file,  seed_ind, R_type)

% sample usage code
% [ ranked_corrs, ranked_regions, regional_corrs, ...
%            ROI_results_legend, regional_ranks, ranked_indices ] ...
% = TimeCourseStats1_semi_automated('../timecourses/blind_TC_mat.mat',  29, 'pear')

% loads time courses (TC_mat), ROI_legend (ROI_legend), 
% subj_legend (subj_legend)
load(TC_mat_file);

% confirm seed
seed_name = ROI_legend(seed_ind, 2);
fprintf('Your command requested the following seed: %s\n', seed_name)
% left V1 = 14
% right V1 = 29

[n_r, TRs, n_s] = size(TC_mat);

% create a matrix to save correlations
regional_corrs = zeros(n_r - 1, n_s);

% create a ROI legend with the seed removed
if (seed_ind == 1)
    ROI_results_legend = ROI_legend(2 : n_r, :);
elseif (seed_ind == n_r)
    ROI_results_legend = ROI_legend(1 : n_r - 1, :);
else
    ROI_results_legend = [ROI_legend(1 : seed_ind - 1, :); ROI_legend(seed_ind + 1 : n_r, :)];
end
for i = 1 : n_r - 1
    ROI_results_legend(i,1) = int2str(i);
end

for (s = 1 : n_s)
    % create a subject's TC map
    s_TC_mat = TC_mat(:, :, s);
    % BEWARE exception: cut out buffer zeros for S201 (index 12)
    if (s == 12)
        s_TC_mat = s_TC_mat(:, 1 : TRs - 6);
    end
    
    % create seed TC
    seedTC = s_TC_mat(seed_ind, :);

    % create ROI TC mat
    if (seed_ind == 1)
        ROI_TC_mat = s_TC_mat(2 : n_r, :);
    elseif (seed_ind == n_r)
        ROI_TC_mat = s_TC_mat(1 : n_r - 1, :);
    else
        ROI_TC_mat = [s_TC_mat(1 : seed_ind - 1, :); s_TC_mat(seed_ind + 1 : n_r, :)];
    end
    
    % create correlation vector
    corrs = zeros(n_r - 1, 1);
    if (R_type == "pear" || R_type == 'pear')
        for r = 1 : n_r - 1
            ROITC = ROI_TC_mat(r, :);
            corr_result = corrcoef(seedTC, ROITC);
            corrs(r, 1) = corr_result(2, 1);
        end
    end
    
    % put correlation vector into groupwise results matrix
    regional_corrs(:, s) = corrs;
end

% ranked_corrs, ranked_indices are shifted versions of regional_corrs
% except, higher correlations should yield higher rank
% thus, we can invert the correlation r = 1 - abs(r);
ranked_corrs = zeros(n_r - 1, n_s);
ranked_indices = zeros(n_r - 1, n_s);
for s = 1 : n_s
    corrs = regional_corrs(:, s);
    inv_corrs = 1 - abs(corrs);
    [s_ranked_inv_corrs, s_ranked_indices] = sort(inv_corrs);
    ranked_corrs(:, s) = 1 - s_ranked_inv_corrs;
    ranked_indices(:, s) = s_ranked_indices;
end

% ranked_regions is replacing the numbers in ranked_indices with strings
ranked_regions = strings(n_r - 1, n_s);
for r = 1 : n_r - 1
    r_name = ROI_results_legend (r, 2);
    [r_indices_i, r_indices_j] = find(ranked_indices == r);
    num = size (r_indices_i, 1);
    for ind = 1 : num
        ranked_regions(r_indices_i(ind), r_indices_j(ind)) = r_name;
    end
end

% regional_ranks is from sorting the inverted correlations of each subj
% and figuring out which rank belongs to each region
% https://stackoverflow.com/questions/18746759/assign-rank-to-numbers-in-a-vector
regional_ranks = zeros(n_r - 1, n_s);
for s = 1 : n_s
    corrs = regional_corrs(:, s);
    inv_corrs = 1 - abs(corrs);
    [~, ~, IC] = unique(inv_corrs);
    regional_ranks(:, s) = IC;
end

end

